// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: logic/logic.proto

package com.ideal.logic;

public final class logic {
  private logic() {}
  public static void registerAllExtensions(
      com.google.protobuf.ExtensionRegistry registry) {
  }
  public static abstract class logic_server
      implements com.google.protobuf.Service {
    protected logic_server() {}
    
    public interface Interface {
      public abstract void modbusControl(
              com.google.protobuf.RpcController controller,
              modbus_data.modbus_req request,
              com.google.protobuf.RpcCallback<modbus_data.modbus_response> done);
      
      public abstract void modbusRead(
              com.google.protobuf.RpcController controller,
              modbus_data.read_data_req request,
              com.google.protobuf.RpcCallback<modbus_data.read_data_response> done);
      
      public abstract void userLogin(
              com.google.protobuf.RpcController controller,
              login_data.login_req request,
              com.google.protobuf.RpcCallback<login_data.login_response> done);
      
      public abstract void hmiControl(
              com.google.protobuf.RpcController controller,
              hmi_data.hmi_control_req request,
              com.google.protobuf.RpcCallback<hmi_data.hmi_control_response> done);
      
      public abstract void commandControl(
              com.google.protobuf.RpcController controller,
              control_data.control_req request,
              com.google.protobuf.RpcCallback<control_data.control_response> done);
      
      public abstract void updateOnlineStatus(
              com.google.protobuf.RpcController controller,
              online_info.update_online_status_request request,
              com.google.protobuf.RpcCallback<online_info.update_online_status_result> done);
      
      public abstract void updateLastestData(
              com.google.protobuf.RpcController controller,
              lastest_data.update_lastest_data_request request,
              com.google.protobuf.RpcCallback<lastest_data.update_lastest_data_result> done);
      
      public abstract void regRefreshLastestData(
              com.google.protobuf.RpcController controller,
              lastest_data.reg_lastest_data request,
              com.google.protobuf.RpcCallback<lastest_data.reg_lastest_data_response> done);
      
      public abstract void unregRefreshLastestData(
              com.google.protobuf.RpcController controller,
              lastest_data.unreg_lastest_data request,
              com.google.protobuf.RpcCallback<lastest_data.unreg_lastest_data_response> done);
      
      public abstract void updateFile(
              com.google.protobuf.RpcController controller,
              file_data.update_file_request request,
              com.google.protobuf.RpcCallback<file_data.update_file_result> done);
      
      public abstract void changePassword(
              com.google.protobuf.RpcController controller,
              login_data.change_pwd_request request,
              com.google.protobuf.RpcCallback<login_data.change_pwd_result> done);
      
      public abstract void controlDataRead(
              com.google.protobuf.RpcController controller,
              control_data.read_control_req request,
              com.google.protobuf.RpcCallback<control_data.read_control_data_response> done);
      
      public abstract void alarmDataRead(
              com.google.protobuf.RpcController controller,
              alarm_data.read_alarm_req request,
              com.google.protobuf.RpcCallback<alarm_data.read_alarm_data_response> done);
      
      public abstract void offlineRead(
              com.google.protobuf.RpcController controller,
              offline_info.update_offline_status_request request,
              com.google.protobuf.RpcCallback<offline_info.update_offline_status_result> done);
      
      public abstract void deviceRead(
              com.google.protobuf.RpcController controller,
              offline_info.device_info_request request,
              com.google.protobuf.RpcCallback<offline_info.device_info_response> done);
      
      public abstract void regServerLastestdata(
              com.google.protobuf.RpcController controller,
              com.ideal.logic.server_lastestdata.reg_server_lastestdata request,
              com.google.protobuf.RpcCallback<com.ideal.logic.server_lastestdata.server_lastestdata_response> done);
      
      public abstract void regServerOnline(
              com.google.protobuf.RpcController controller,
              com.ideal.logic.server_online.reg_server_online request,
              com.google.protobuf.RpcCallback<com.ideal.logic.server_online.server_online_response> done);
      
      public abstract void unregServerLastestdata(
              com.google.protobuf.RpcController controller,
              com.ideal.logic.server_lastestdata.unreg_server_lastestdata request,
              com.google.protobuf.RpcCallback<com.ideal.logic.server_lastestdata.unreg_lastestdata_response> done);
      
      public abstract void unregServerOnline(
              com.google.protobuf.RpcController controller,
              com.ideal.logic.server_online.unreg_server_online request,
              com.google.protobuf.RpcCallback<com.ideal.logic.server_online.unreg_online_response> done);
      
    }
    
    public static com.google.protobuf.Service newReflectiveService(
        final Interface impl) {
      return new logic_server() {
        @Override
        public  void modbusControl(
            com.google.protobuf.RpcController controller,
            modbus_data.modbus_req request,
            com.google.protobuf.RpcCallback<modbus_data.modbus_response> done) {
          impl.modbusControl(controller, request, done);
        }
        
        @Override
        public  void modbusRead(
            com.google.protobuf.RpcController controller,
            modbus_data.read_data_req request,
            com.google.protobuf.RpcCallback<modbus_data.read_data_response> done) {
          impl.modbusRead(controller, request, done);
        }
        
        @Override
        public  void userLogin(
            com.google.protobuf.RpcController controller,
            login_data.login_req request,
            com.google.protobuf.RpcCallback<login_data.login_response> done) {
          impl.userLogin(controller, request, done);
        }
        
        @Override
        public  void hmiControl(
            com.google.protobuf.RpcController controller,
            hmi_data.hmi_control_req request,
            com.google.protobuf.RpcCallback<hmi_data.hmi_control_response> done) {
          impl.hmiControl(controller, request, done);
        }
        
        @Override
        public  void commandControl(
            com.google.protobuf.RpcController controller,
            control_data.control_req request,
            com.google.protobuf.RpcCallback<control_data.control_response> done) {
          impl.commandControl(controller, request, done);
        }
        
        @Override
        public  void updateOnlineStatus(
            com.google.protobuf.RpcController controller,
            online_info.update_online_status_request request,
            com.google.protobuf.RpcCallback<online_info.update_online_status_result> done) {
          impl.updateOnlineStatus(controller, request, done);
        }
        
        @Override
        public  void updateLastestData(
            com.google.protobuf.RpcController controller,
            lastest_data.update_lastest_data_request request,
            com.google.protobuf.RpcCallback<lastest_data.update_lastest_data_result> done) {
          impl.updateLastestData(controller, request, done);
        }
        
        @Override
        public  void regRefreshLastestData(
            com.google.protobuf.RpcController controller,
            lastest_data.reg_lastest_data request,
            com.google.protobuf.RpcCallback<lastest_data.reg_lastest_data_response> done) {
          impl.regRefreshLastestData(controller, request, done);
        }
        
        @Override
        public  void unregRefreshLastestData(
            com.google.protobuf.RpcController controller,
            lastest_data.unreg_lastest_data request,
            com.google.protobuf.RpcCallback<lastest_data.unreg_lastest_data_response> done) {
          impl.unregRefreshLastestData(controller, request, done);
        }
        
        @Override
        public  void updateFile(
            com.google.protobuf.RpcController controller,
            file_data.update_file_request request,
            com.google.protobuf.RpcCallback<file_data.update_file_result> done) {
          impl.updateFile(controller, request, done);
        }
        
        @Override
        public  void changePassword(
            com.google.protobuf.RpcController controller,
            login_data.change_pwd_request request,
            com.google.protobuf.RpcCallback<login_data.change_pwd_result> done) {
          impl.changePassword(controller, request, done);
        }
        
        @Override
        public  void controlDataRead(
            com.google.protobuf.RpcController controller,
            control_data.read_control_req request,
            com.google.protobuf.RpcCallback<control_data.read_control_data_response> done) {
          impl.controlDataRead(controller, request, done);
        }
        
        @Override
        public  void alarmDataRead(
            com.google.protobuf.RpcController controller,
            alarm_data.read_alarm_req request,
            com.google.protobuf.RpcCallback<alarm_data.read_alarm_data_response> done) {
          impl.alarmDataRead(controller, request, done);
        }
        
        @Override
        public  void offlineRead(
            com.google.protobuf.RpcController controller,
            offline_info.update_offline_status_request request,
            com.google.protobuf.RpcCallback<offline_info.update_offline_status_result> done) {
          impl.offlineRead(controller, request, done);
        }
        
        @Override
        public  void deviceRead(
            com.google.protobuf.RpcController controller,
            offline_info.device_info_request request,
            com.google.protobuf.RpcCallback<offline_info.device_info_response> done) {
          impl.deviceRead(controller, request, done);
        }
        
        @Override
        public  void regServerLastestdata(
            com.google.protobuf.RpcController controller,
            com.ideal.logic.server_lastestdata.reg_server_lastestdata request,
            com.google.protobuf.RpcCallback<com.ideal.logic.server_lastestdata.server_lastestdata_response> done) {
          impl.regServerLastestdata(controller, request, done);
        }
        
        @Override
        public  void regServerOnline(
            com.google.protobuf.RpcController controller,
            com.ideal.logic.server_online.reg_server_online request,
            com.google.protobuf.RpcCallback<com.ideal.logic.server_online.server_online_response> done) {
          impl.regServerOnline(controller, request, done);
        }
        
        @Override
        public  void unregServerLastestdata(
            com.google.protobuf.RpcController controller,
            com.ideal.logic.server_lastestdata.unreg_server_lastestdata request,
            com.google.protobuf.RpcCallback<com.ideal.logic.server_lastestdata.unreg_lastestdata_response> done) {
          impl.unregServerLastestdata(controller, request, done);
        }
        
        @Override
        public  void unregServerOnline(
            com.google.protobuf.RpcController controller,
            com.ideal.logic.server_online.unreg_server_online request,
            com.google.protobuf.RpcCallback<com.ideal.logic.server_online.unreg_online_response> done) {
          impl.unregServerOnline(controller, request, done);
        }
        
      };
    }
    
    public static com.google.protobuf.BlockingService
        newReflectiveBlockingService(final BlockingInterface impl) {
      return new com.google.protobuf.BlockingService() {
        public final com.google.protobuf.Descriptors.ServiceDescriptor
            getDescriptorForType() {
          return getDescriptor();
        }
        
        public final com.google.protobuf.Message callBlockingMethod(
            com.google.protobuf.Descriptors.MethodDescriptor method,
            com.google.protobuf.RpcController controller,
            com.google.protobuf.Message request)
            throws com.google.protobuf.ServiceException {
          if (method.getService() != getDescriptor()) {
            throw new IllegalArgumentException(
              "Service.callBlockingMethod() given method descriptor for " +
              "wrong service type.");
          }
          switch(method.getIndex()) {
            case 0:
              return impl.modbusControl(controller, (modbus_data.modbus_req)request);
            case 1:
              return impl.modbusRead(controller, (modbus_data.read_data_req)request);
            case 2:
              return impl.userLogin(controller, (login_data.login_req)request);
            case 3:
              return impl.hmiControl(controller, (hmi_data.hmi_control_req)request);
            case 4:
              return impl.commandControl(controller, (control_data.control_req)request);
            case 5:
              return impl.updateOnlineStatus(controller, (online_info.update_online_status_request)request);
            case 6:
              return impl.updateLastestData(controller, (lastest_data.update_lastest_data_request)request);
            case 7:
              return impl.regRefreshLastestData(controller, (lastest_data.reg_lastest_data)request);
            case 8:
              return impl.unregRefreshLastestData(controller, (lastest_data.unreg_lastest_data)request);
            case 9:
              return impl.updateFile(controller, (file_data.update_file_request)request);
            case 10:
              return impl.changePassword(controller, (login_data.change_pwd_request)request);
            case 11:
              return impl.controlDataRead(controller, (control_data.read_control_req)request);
            case 12:
              return impl.alarmDataRead(controller, (alarm_data.read_alarm_req)request);
            case 13:
              return impl.offlineRead(controller, (offline_info.update_offline_status_request)request);
            case 14:
              return impl.deviceRead(controller, (offline_info.device_info_request)request);
            case 15:
              return impl.regServerLastestdata(controller, (com.ideal.logic.server_lastestdata.reg_server_lastestdata)request);
            case 16:
              return impl.regServerOnline(controller, (com.ideal.logic.server_online.reg_server_online)request);
            case 17:
              return impl.unregServerLastestdata(controller, (com.ideal.logic.server_lastestdata.unreg_server_lastestdata)request);
            case 18:
              return impl.unregServerOnline(controller, (com.ideal.logic.server_online.unreg_server_online)request);
            default:
              throw new AssertionError("Can't get here.");
          }
        }
        
        public final com.google.protobuf.Message
            getRequestPrototype(
            com.google.protobuf.Descriptors.MethodDescriptor method) {
          if (method.getService() != getDescriptor()) {
            throw new IllegalArgumentException(
              "Service.getRequestPrototype() given method " +
              "descriptor for wrong service type.");
          }
          switch(method.getIndex()) {
            case 0:
              return modbus_data.modbus_req.getDefaultInstance();
            case 1:
              return modbus_data.read_data_req.getDefaultInstance();
            case 2:
              return login_data.login_req.getDefaultInstance();
            case 3:
              return hmi_data.hmi_control_req.getDefaultInstance();
            case 4:
              return control_data.control_req.getDefaultInstance();
            case 5:
              return online_info.update_online_status_request.getDefaultInstance();
            case 6:
              return lastest_data.update_lastest_data_request.getDefaultInstance();
            case 7:
              return lastest_data.reg_lastest_data.getDefaultInstance();
            case 8:
              return lastest_data.unreg_lastest_data.getDefaultInstance();
            case 9:
              return file_data.update_file_request.getDefaultInstance();
            case 10:
              return login_data.change_pwd_request.getDefaultInstance();
            case 11:
              return control_data.read_control_req.getDefaultInstance();
            case 12:
              return alarm_data.read_alarm_req.getDefaultInstance();
            case 13:
              return offline_info.update_offline_status_request.getDefaultInstance();
            case 14:
              return offline_info.device_info_request.getDefaultInstance();
            case 15:
              return com.ideal.logic.server_lastestdata.reg_server_lastestdata.getDefaultInstance();
            case 16:
              return com.ideal.logic.server_online.reg_server_online.getDefaultInstance();
            case 17:
              return com.ideal.logic.server_lastestdata.unreg_server_lastestdata.getDefaultInstance();
            case 18:
              return com.ideal.logic.server_online.unreg_server_online.getDefaultInstance();
            default:
              throw new AssertionError("Can't get here.");
          }
        }
        
        public final com.google.protobuf.Message
            getResponsePrototype(
            com.google.protobuf.Descriptors.MethodDescriptor method) {
          if (method.getService() != getDescriptor()) {
            throw new IllegalArgumentException(
              "Service.getResponsePrototype() given method " +
              "descriptor for wrong service type.");
          }
          switch(method.getIndex()) {
            case 0:
              return modbus_data.modbus_response.getDefaultInstance();
            case 1:
              return modbus_data.read_data_response.getDefaultInstance();
            case 2:
              return login_data.login_response.getDefaultInstance();
            case 3:
              return hmi_data.hmi_control_response.getDefaultInstance();
            case 4:
              return control_data.control_response.getDefaultInstance();
            case 5:
              return online_info.update_online_status_result.getDefaultInstance();
            case 6:
              return lastest_data.update_lastest_data_result.getDefaultInstance();
            case 7:
              return lastest_data.reg_lastest_data_response.getDefaultInstance();
            case 8:
              return lastest_data.unreg_lastest_data_response.getDefaultInstance();
            case 9:
              return file_data.update_file_result.getDefaultInstance();
            case 10:
              return login_data.change_pwd_result.getDefaultInstance();
            case 11:
              return control_data.read_control_data_response.getDefaultInstance();
            case 12:
              return alarm_data.read_alarm_data_response.getDefaultInstance();
            case 13:
              return offline_info.update_offline_status_result.getDefaultInstance();
            case 14:
              return offline_info.device_info_response.getDefaultInstance();
            case 15:
              return com.ideal.logic.server_lastestdata.server_lastestdata_response.getDefaultInstance();
            case 16:
              return com.ideal.logic.server_online.server_online_response.getDefaultInstance();
            case 17:
              return com.ideal.logic.server_lastestdata.unreg_lastestdata_response.getDefaultInstance();
            case 18:
              return com.ideal.logic.server_online.unreg_online_response.getDefaultInstance();
            default:
              throw new AssertionError("Can't get here.");
          }
        }
        
      };
    }
    
    public abstract void modbusControl(
        com.google.protobuf.RpcController controller,
        modbus_data.modbus_req request,
        com.google.protobuf.RpcCallback<modbus_data.modbus_response> done);
    
    public abstract void modbusRead(
        com.google.protobuf.RpcController controller,
        modbus_data.read_data_req request,
        com.google.protobuf.RpcCallback<modbus_data.read_data_response> done);
    
    public abstract void userLogin(
        com.google.protobuf.RpcController controller,
        login_data.login_req request,
        com.google.protobuf.RpcCallback<login_data.login_response> done);
    
    public abstract void hmiControl(
        com.google.protobuf.RpcController controller,
        hmi_data.hmi_control_req request,
        com.google.protobuf.RpcCallback<hmi_data.hmi_control_response> done);
    
    public abstract void commandControl(
        com.google.protobuf.RpcController controller,
        control_data.control_req request,
        com.google.protobuf.RpcCallback<control_data.control_response> done);
    
    public abstract void updateOnlineStatus(
        com.google.protobuf.RpcController controller,
        online_info.update_online_status_request request,
        com.google.protobuf.RpcCallback<online_info.update_online_status_result> done);
    
    public abstract void updateLastestData(
        com.google.protobuf.RpcController controller,
        lastest_data.update_lastest_data_request request,
        com.google.protobuf.RpcCallback<lastest_data.update_lastest_data_result> done);
    
    public abstract void regRefreshLastestData(
        com.google.protobuf.RpcController controller,
        lastest_data.reg_lastest_data request,
        com.google.protobuf.RpcCallback<lastest_data.reg_lastest_data_response> done);
    
    public abstract void unregRefreshLastestData(
        com.google.protobuf.RpcController controller,
        lastest_data.unreg_lastest_data request,
        com.google.protobuf.RpcCallback<lastest_data.unreg_lastest_data_response> done);
    
    public abstract void updateFile(
        com.google.protobuf.RpcController controller,
        file_data.update_file_request request,
        com.google.protobuf.RpcCallback<file_data.update_file_result> done);
    
    public abstract void changePassword(
        com.google.protobuf.RpcController controller,
        login_data.change_pwd_request request,
        com.google.protobuf.RpcCallback<login_data.change_pwd_result> done);
    
    public abstract void controlDataRead(
        com.google.protobuf.RpcController controller,
        control_data.read_control_req request,
        com.google.protobuf.RpcCallback<control_data.read_control_data_response> done);
    
    public abstract void alarmDataRead(
        com.google.protobuf.RpcController controller,
        alarm_data.read_alarm_req request,
        com.google.protobuf.RpcCallback<alarm_data.read_alarm_data_response> done);
    
    public abstract void offlineRead(
        com.google.protobuf.RpcController controller,
        offline_info.update_offline_status_request request,
        com.google.protobuf.RpcCallback<offline_info.update_offline_status_result> done);
    
    public abstract void deviceRead(
        com.google.protobuf.RpcController controller,
        offline_info.device_info_request request,
        com.google.protobuf.RpcCallback<offline_info.device_info_response> done);
    
    public abstract void regServerLastestdata(
        com.google.protobuf.RpcController controller,
        com.ideal.logic.server_lastestdata.reg_server_lastestdata request,
        com.google.protobuf.RpcCallback<com.ideal.logic.server_lastestdata.server_lastestdata_response> done);
    
    public abstract void regServerOnline(
        com.google.protobuf.RpcController controller,
        com.ideal.logic.server_online.reg_server_online request,
        com.google.protobuf.RpcCallback<com.ideal.logic.server_online.server_online_response> done);
    
    public abstract void unregServerLastestdata(
        com.google.protobuf.RpcController controller,
        com.ideal.logic.server_lastestdata.unreg_server_lastestdata request,
        com.google.protobuf.RpcCallback<com.ideal.logic.server_lastestdata.unreg_lastestdata_response> done);
    
    public abstract void unregServerOnline(
        com.google.protobuf.RpcController controller,
        com.ideal.logic.server_online.unreg_server_online request,
        com.google.protobuf.RpcCallback<com.ideal.logic.server_online.unreg_online_response> done);
    
    public static final
        com.google.protobuf.Descriptors.ServiceDescriptor
        getDescriptor() {
      return logic.getDescriptor().getServices().get(0);
    }
    public final com.google.protobuf.Descriptors.ServiceDescriptor
        getDescriptorForType() {
      return getDescriptor();
    }
    
    public final void callMethod(
        com.google.protobuf.Descriptors.MethodDescriptor method,
        com.google.protobuf.RpcController controller,
        com.google.protobuf.Message request,
        com.google.protobuf.RpcCallback<
          com.google.protobuf.Message> done) {
      if (method.getService() != getDescriptor()) {
        throw new IllegalArgumentException(
          "Service.callMethod() given method descriptor for wrong " +
          "service type.");
      }
      switch(method.getIndex()) {
        case 0:
          this.modbusControl(controller, (modbus_data.modbus_req)request,
            com.google.protobuf.RpcUtil.<modbus_data.modbus_response>specializeCallback(
              done));
          return;
        case 1:
          this.modbusRead(controller, (modbus_data.read_data_req)request,
            com.google.protobuf.RpcUtil.<modbus_data.read_data_response>specializeCallback(
              done));
          return;
        case 2:
          this.userLogin(controller, (login_data.login_req)request,
            com.google.protobuf.RpcUtil.<login_data.login_response>specializeCallback(
              done));
          return;
        case 3:
          this.hmiControl(controller, (hmi_data.hmi_control_req)request,
            com.google.protobuf.RpcUtil.<hmi_data.hmi_control_response>specializeCallback(
              done));
          return;
        case 4:
          this.commandControl(controller, (control_data.control_req)request,
            com.google.protobuf.RpcUtil.<control_data.control_response>specializeCallback(
              done));
          return;
        case 5:
          this.updateOnlineStatus(controller, (online_info.update_online_status_request)request,
            com.google.protobuf.RpcUtil.<online_info.update_online_status_result>specializeCallback(
              done));
          return;
        case 6:
          this.updateLastestData(controller, (lastest_data.update_lastest_data_request)request,
            com.google.protobuf.RpcUtil.<lastest_data.update_lastest_data_result>specializeCallback(
              done));
          return;
        case 7:
          this.regRefreshLastestData(controller, (lastest_data.reg_lastest_data)request,
            com.google.protobuf.RpcUtil.<lastest_data.reg_lastest_data_response>specializeCallback(
              done));
          return;
        case 8:
          this.unregRefreshLastestData(controller, (lastest_data.unreg_lastest_data)request,
            com.google.protobuf.RpcUtil.<lastest_data.unreg_lastest_data_response>specializeCallback(
              done));
          return;
        case 9:
          this.updateFile(controller, (file_data.update_file_request)request,
            com.google.protobuf.RpcUtil.<file_data.update_file_result>specializeCallback(
              done));
          return;
        case 10:
          this.changePassword(controller, (login_data.change_pwd_request)request,
            com.google.protobuf.RpcUtil.<login_data.change_pwd_result>specializeCallback(
              done));
          return;
        case 11:
          this.controlDataRead(controller, (control_data.read_control_req)request,
            com.google.protobuf.RpcUtil.<control_data.read_control_data_response>specializeCallback(
              done));
          return;
        case 12:
          this.alarmDataRead(controller, (alarm_data.read_alarm_req)request,
            com.google.protobuf.RpcUtil.<alarm_data.read_alarm_data_response>specializeCallback(
              done));
          return;
        case 13:
          this.offlineRead(controller, (offline_info.update_offline_status_request)request,
            com.google.protobuf.RpcUtil.<offline_info.update_offline_status_result>specializeCallback(
              done));
          return;
        case 14:
          this.deviceRead(controller, (offline_info.device_info_request)request,
            com.google.protobuf.RpcUtil.<offline_info.device_info_response>specializeCallback(
              done));
          return;
        case 15:
          this.regServerLastestdata(controller, (com.ideal.logic.server_lastestdata.reg_server_lastestdata)request,
            com.google.protobuf.RpcUtil.<com.ideal.logic.server_lastestdata.server_lastestdata_response>specializeCallback(
              done));
          return;
        case 16:
          this.regServerOnline(controller, (com.ideal.logic.server_online.reg_server_online)request,
            com.google.protobuf.RpcUtil.<com.ideal.logic.server_online.server_online_response>specializeCallback(
              done));
          return;
        case 17:
          this.unregServerLastestdata(controller, (com.ideal.logic.server_lastestdata.unreg_server_lastestdata)request,
            com.google.protobuf.RpcUtil.<com.ideal.logic.server_lastestdata.unreg_lastestdata_response>specializeCallback(
              done));
          return;
        case 18:
          this.unregServerOnline(controller, (com.ideal.logic.server_online.unreg_server_online)request,
            com.google.protobuf.RpcUtil.<com.ideal.logic.server_online.unreg_online_response>specializeCallback(
              done));
          return;
        default:
          throw new AssertionError("Can't get here.");
      }
    }
    
    public final com.google.protobuf.Message
        getRequestPrototype(
        com.google.protobuf.Descriptors.MethodDescriptor method) {
      if (method.getService() != getDescriptor()) {
        throw new IllegalArgumentException(
          "Service.getRequestPrototype() given method " +
          "descriptor for wrong service type.");
      }
      switch(method.getIndex()) {
        case 0:
          return modbus_data.modbus_req.getDefaultInstance();
        case 1:
          return modbus_data.read_data_req.getDefaultInstance();
        case 2:
          return login_data.login_req.getDefaultInstance();
        case 3:
          return hmi_data.hmi_control_req.getDefaultInstance();
        case 4:
          return control_data.control_req.getDefaultInstance();
        case 5:
          return online_info.update_online_status_request.getDefaultInstance();
        case 6:
          return lastest_data.update_lastest_data_request.getDefaultInstance();
        case 7:
          return lastest_data.reg_lastest_data.getDefaultInstance();
        case 8:
          return lastest_data.unreg_lastest_data.getDefaultInstance();
        case 9:
          return file_data.update_file_request.getDefaultInstance();
        case 10:
          return login_data.change_pwd_request.getDefaultInstance();
        case 11:
          return control_data.read_control_req.getDefaultInstance();
        case 12:
          return alarm_data.read_alarm_req.getDefaultInstance();
        case 13:
          return offline_info.update_offline_status_request.getDefaultInstance();
        case 14:
          return offline_info.device_info_request.getDefaultInstance();
        case 15:
          return com.ideal.logic.server_lastestdata.reg_server_lastestdata.getDefaultInstance();
        case 16:
          return com.ideal.logic.server_online.reg_server_online.getDefaultInstance();
        case 17:
          return com.ideal.logic.server_lastestdata.unreg_server_lastestdata.getDefaultInstance();
        case 18:
          return com.ideal.logic.server_online.unreg_server_online.getDefaultInstance();
        default:
          throw new AssertionError("Can't get here.");
      }
    }
    
    public final com.google.protobuf.Message
        getResponsePrototype(
        com.google.protobuf.Descriptors.MethodDescriptor method) {
      if (method.getService() != getDescriptor()) {
        throw new IllegalArgumentException(
          "Service.getResponsePrototype() given method " +
          "descriptor for wrong service type.");
      }
      switch(method.getIndex()) {
        case 0:
          return modbus_data.modbus_response.getDefaultInstance();
        case 1:
          return modbus_data.read_data_response.getDefaultInstance();
        case 2:
          return login_data.login_response.getDefaultInstance();
        case 3:
          return hmi_data.hmi_control_response.getDefaultInstance();
        case 4:
          return control_data.control_response.getDefaultInstance();
        case 5:
          return online_info.update_online_status_result.getDefaultInstance();
        case 6:
          return lastest_data.update_lastest_data_result.getDefaultInstance();
        case 7:
          return lastest_data.reg_lastest_data_response.getDefaultInstance();
        case 8:
          return lastest_data.unreg_lastest_data_response.getDefaultInstance();
        case 9:
          return file_data.update_file_result.getDefaultInstance();
        case 10:
          return login_data.change_pwd_result.getDefaultInstance();
        case 11:
          return control_data.read_control_data_response.getDefaultInstance();
        case 12:
          return alarm_data.read_alarm_data_response.getDefaultInstance();
        case 13:
          return offline_info.update_offline_status_result.getDefaultInstance();
        case 14:
          return offline_info.device_info_response.getDefaultInstance();
        case 15:
          return com.ideal.logic.server_lastestdata.server_lastestdata_response.getDefaultInstance();
        case 16:
          return com.ideal.logic.server_online.server_online_response.getDefaultInstance();
        case 17:
          return com.ideal.logic.server_lastestdata.unreg_lastestdata_response.getDefaultInstance();
        case 18:
          return com.ideal.logic.server_online.unreg_online_response.getDefaultInstance();
        default:
          throw new AssertionError("Can't get here.");
      }
    }
    
    public static Stub newStub(
        com.google.protobuf.RpcChannel channel) {
      return new Stub(channel);
    }
    
    public static final class Stub extends logic_server implements Interface {
      private Stub(com.google.protobuf.RpcChannel channel) {
        this.channel = channel;
      }
      
      private final com.google.protobuf.RpcChannel channel;
      
      public com.google.protobuf.RpcChannel getChannel() {
        return channel;
      }
      
      public  void modbusControl(
          com.google.protobuf.RpcController controller,
          modbus_data.modbus_req request,
          com.google.protobuf.RpcCallback<modbus_data.modbus_response> done) {
        channel.callMethod(
          getDescriptor().getMethods().get(0),
          controller,
          request,
          modbus_data.modbus_response.getDefaultInstance(),
          com.google.protobuf.RpcUtil.generalizeCallback(
            done,
            modbus_data.modbus_response.class,
            modbus_data.modbus_response.getDefaultInstance()));
      }
      
      public  void modbusRead(
          com.google.protobuf.RpcController controller,
          modbus_data.read_data_req request,
          com.google.protobuf.RpcCallback<modbus_data.read_data_response> done) {
        channel.callMethod(
          getDescriptor().getMethods().get(1),
          controller,
          request,
          modbus_data.read_data_response.getDefaultInstance(),
          com.google.protobuf.RpcUtil.generalizeCallback(
            done,
            modbus_data.read_data_response.class,
            modbus_data.read_data_response.getDefaultInstance()));
      }
      
      public  void userLogin(
          com.google.protobuf.RpcController controller,
          login_data.login_req request,
          com.google.protobuf.RpcCallback<login_data.login_response> done) {
        channel.callMethod(
          getDescriptor().getMethods().get(2),
          controller,
          request,
          login_data.login_response.getDefaultInstance(),
          com.google.protobuf.RpcUtil.generalizeCallback(
            done,
            login_data.login_response.class,
            login_data.login_response.getDefaultInstance()));
      }
      
      public  void hmiControl(
          com.google.protobuf.RpcController controller,
          hmi_data.hmi_control_req request,
          com.google.protobuf.RpcCallback<hmi_data.hmi_control_response> done) {
        channel.callMethod(
          getDescriptor().getMethods().get(3),
          controller,
          request,
          hmi_data.hmi_control_response.getDefaultInstance(),
          com.google.protobuf.RpcUtil.generalizeCallback(
            done,
            hmi_data.hmi_control_response.class,
            hmi_data.hmi_control_response.getDefaultInstance()));
      }
      
      public  void commandControl(
          com.google.protobuf.RpcController controller,
          control_data.control_req request,
          com.google.protobuf.RpcCallback<control_data.control_response> done) {
        channel.callMethod(
          getDescriptor().getMethods().get(4),
          controller,
          request,
          control_data.control_response.getDefaultInstance(),
          com.google.protobuf.RpcUtil.generalizeCallback(
            done,
            control_data.control_response.class,
            control_data.control_response.getDefaultInstance()));
      }
      
      public  void updateOnlineStatus(
          com.google.protobuf.RpcController controller,
          online_info.update_online_status_request request,
          com.google.protobuf.RpcCallback<online_info.update_online_status_result> done) {
        channel.callMethod(
          getDescriptor().getMethods().get(5),
          controller,
          request,
          online_info.update_online_status_result.getDefaultInstance(),
          com.google.protobuf.RpcUtil.generalizeCallback(
            done,
            online_info.update_online_status_result.class,
            online_info.update_online_status_result.getDefaultInstance()));
      }
      
      public  void updateLastestData(
          com.google.protobuf.RpcController controller,
          lastest_data.update_lastest_data_request request,
          com.google.protobuf.RpcCallback<lastest_data.update_lastest_data_result> done) {
        channel.callMethod(
          getDescriptor().getMethods().get(6),
          controller,
          request,
          lastest_data.update_lastest_data_result.getDefaultInstance(),
          com.google.protobuf.RpcUtil.generalizeCallback(
            done,
            lastest_data.update_lastest_data_result.class,
            lastest_data.update_lastest_data_result.getDefaultInstance()));
      }
      
      public  void regRefreshLastestData(
          com.google.protobuf.RpcController controller,
          lastest_data.reg_lastest_data request,
          com.google.protobuf.RpcCallback<lastest_data.reg_lastest_data_response> done) {
        channel.callMethod(
          getDescriptor().getMethods().get(7),
          controller,
          request,
          lastest_data.reg_lastest_data_response.getDefaultInstance(),
          com.google.protobuf.RpcUtil.generalizeCallback(
            done,
            lastest_data.reg_lastest_data_response.class,
            lastest_data.reg_lastest_data_response.getDefaultInstance()));
      }
      
      public  void unregRefreshLastestData(
          com.google.protobuf.RpcController controller,
          lastest_data.unreg_lastest_data request,
          com.google.protobuf.RpcCallback<lastest_data.unreg_lastest_data_response> done) {
        channel.callMethod(
          getDescriptor().getMethods().get(8),
          controller,
          request,
          lastest_data.unreg_lastest_data_response.getDefaultInstance(),
          com.google.protobuf.RpcUtil.generalizeCallback(
            done,
            lastest_data.unreg_lastest_data_response.class,
            lastest_data.unreg_lastest_data_response.getDefaultInstance()));
      }
      
      public  void updateFile(
          com.google.protobuf.RpcController controller,
          file_data.update_file_request request,
          com.google.protobuf.RpcCallback<file_data.update_file_result> done) {
        channel.callMethod(
          getDescriptor().getMethods().get(9),
          controller,
          request,
          file_data.update_file_result.getDefaultInstance(),
          com.google.protobuf.RpcUtil.generalizeCallback(
            done,
            file_data.update_file_result.class,
            file_data.update_file_result.getDefaultInstance()));
      }
      
      public  void changePassword(
          com.google.protobuf.RpcController controller,
          login_data.change_pwd_request request,
          com.google.protobuf.RpcCallback<login_data.change_pwd_result> done) {
        channel.callMethod(
          getDescriptor().getMethods().get(10),
          controller,
          request,
          login_data.change_pwd_result.getDefaultInstance(),
          com.google.protobuf.RpcUtil.generalizeCallback(
            done,
            login_data.change_pwd_result.class,
            login_data.change_pwd_result.getDefaultInstance()));
      }
      
      public  void controlDataRead(
          com.google.protobuf.RpcController controller,
          control_data.read_control_req request,
          com.google.protobuf.RpcCallback<control_data.read_control_data_response> done) {
        channel.callMethod(
          getDescriptor().getMethods().get(11),
          controller,
          request,
          control_data.read_control_data_response.getDefaultInstance(),
          com.google.protobuf.RpcUtil.generalizeCallback(
            done,
            control_data.read_control_data_response.class,
            control_data.read_control_data_response.getDefaultInstance()));
      }
      
      public  void alarmDataRead(
          com.google.protobuf.RpcController controller,
          alarm_data.read_alarm_req request,
          com.google.protobuf.RpcCallback<alarm_data.read_alarm_data_response> done) {
        channel.callMethod(
          getDescriptor().getMethods().get(12),
          controller,
          request,
          alarm_data.read_alarm_data_response.getDefaultInstance(),
          com.google.protobuf.RpcUtil.generalizeCallback(
            done,
            alarm_data.read_alarm_data_response.class,
            alarm_data.read_alarm_data_response.getDefaultInstance()));
      }
      
      public  void offlineRead(
          com.google.protobuf.RpcController controller,
          offline_info.update_offline_status_request request,
          com.google.protobuf.RpcCallback<offline_info.update_offline_status_result> done) {
        channel.callMethod(
          getDescriptor().getMethods().get(13),
          controller,
          request,
          offline_info.update_offline_status_result.getDefaultInstance(),
          com.google.protobuf.RpcUtil.generalizeCallback(
            done,
            offline_info.update_offline_status_result.class,
            offline_info.update_offline_status_result.getDefaultInstance()));
      }
      
      public  void deviceRead(
          com.google.protobuf.RpcController controller,
          offline_info.device_info_request request,
          com.google.protobuf.RpcCallback<offline_info.device_info_response> done) {
        channel.callMethod(
          getDescriptor().getMethods().get(14),
          controller,
          request,
          offline_info.device_info_response.getDefaultInstance(),
          com.google.protobuf.RpcUtil.generalizeCallback(
            done,
            offline_info.device_info_response.class,
            offline_info.device_info_response.getDefaultInstance()));
      }
      
      public  void regServerLastestdata(
          com.google.protobuf.RpcController controller,
          com.ideal.logic.server_lastestdata.reg_server_lastestdata request,
          com.google.protobuf.RpcCallback<com.ideal.logic.server_lastestdata.server_lastestdata_response> done) {
        channel.callMethod(
          getDescriptor().getMethods().get(15),
          controller,
          request,
          com.ideal.logic.server_lastestdata.server_lastestdata_response.getDefaultInstance(),
          com.google.protobuf.RpcUtil.generalizeCallback(
            done,
            com.ideal.logic.server_lastestdata.server_lastestdata_response.class,
            com.ideal.logic.server_lastestdata.server_lastestdata_response.getDefaultInstance()));
      }
      
      public  void regServerOnline(
          com.google.protobuf.RpcController controller,
          com.ideal.logic.server_online.reg_server_online request,
          com.google.protobuf.RpcCallback<com.ideal.logic.server_online.server_online_response> done) {
        channel.callMethod(
          getDescriptor().getMethods().get(16),
          controller,
          request,
          com.ideal.logic.server_online.server_online_response.getDefaultInstance(),
          com.google.protobuf.RpcUtil.generalizeCallback(
            done,
            com.ideal.logic.server_online.server_online_response.class,
            com.ideal.logic.server_online.server_online_response.getDefaultInstance()));
      }
      
      public  void unregServerLastestdata(
          com.google.protobuf.RpcController controller,
          com.ideal.logic.server_lastestdata.unreg_server_lastestdata request,
          com.google.protobuf.RpcCallback<com.ideal.logic.server_lastestdata.unreg_lastestdata_response> done) {
        channel.callMethod(
          getDescriptor().getMethods().get(17),
          controller,
          request,
          com.ideal.logic.server_lastestdata.unreg_lastestdata_response.getDefaultInstance(),
          com.google.protobuf.RpcUtil.generalizeCallback(
            done,
            com.ideal.logic.server_lastestdata.unreg_lastestdata_response.class,
            com.ideal.logic.server_lastestdata.unreg_lastestdata_response.getDefaultInstance()));
      }
      
      public  void unregServerOnline(
          com.google.protobuf.RpcController controller,
          com.ideal.logic.server_online.unreg_server_online request,
          com.google.protobuf.RpcCallback<com.ideal.logic.server_online.unreg_online_response> done) {
        channel.callMethod(
          getDescriptor().getMethods().get(18),
          controller,
          request,
          com.ideal.logic.server_online.unreg_online_response.getDefaultInstance(),
          com.google.protobuf.RpcUtil.generalizeCallback(
            done,
            com.ideal.logic.server_online.unreg_online_response.class,
            com.ideal.logic.server_online.unreg_online_response.getDefaultInstance()));
      }
    }
    
    public static BlockingInterface newBlockingStub(
        com.google.protobuf.BlockingRpcChannel channel) {
      return new BlockingStub(channel);
    }
    
    public interface BlockingInterface {
      public modbus_data.modbus_response modbusControl(
              com.google.protobuf.RpcController controller,
              modbus_data.modbus_req request)
          throws com.google.protobuf.ServiceException;
      
      public modbus_data.read_data_response modbusRead(
              com.google.protobuf.RpcController controller,
              modbus_data.read_data_req request)
          throws com.google.protobuf.ServiceException;
      
      public login_data.login_response userLogin(
              com.google.protobuf.RpcController controller,
              login_data.login_req request)
          throws com.google.protobuf.ServiceException;
      
      public hmi_data.hmi_control_response hmiControl(
              com.google.protobuf.RpcController controller,
              hmi_data.hmi_control_req request)
          throws com.google.protobuf.ServiceException;
      
      public control_data.control_response commandControl(
              com.google.protobuf.RpcController controller,
              control_data.control_req request)
          throws com.google.protobuf.ServiceException;
      
      public online_info.update_online_status_result updateOnlineStatus(
              com.google.protobuf.RpcController controller,
              online_info.update_online_status_request request)
          throws com.google.protobuf.ServiceException;
      
      public lastest_data.update_lastest_data_result updateLastestData(
              com.google.protobuf.RpcController controller,
              lastest_data.update_lastest_data_request request)
          throws com.google.protobuf.ServiceException;
      
      public lastest_data.reg_lastest_data_response regRefreshLastestData(
              com.google.protobuf.RpcController controller,
              lastest_data.reg_lastest_data request)
          throws com.google.protobuf.ServiceException;
      
      public lastest_data.unreg_lastest_data_response unregRefreshLastestData(
              com.google.protobuf.RpcController controller,
              lastest_data.unreg_lastest_data request)
          throws com.google.protobuf.ServiceException;
      
      public file_data.update_file_result updateFile(
              com.google.protobuf.RpcController controller,
              file_data.update_file_request request)
          throws com.google.protobuf.ServiceException;
      
      public login_data.change_pwd_result changePassword(
              com.google.protobuf.RpcController controller,
              login_data.change_pwd_request request)
          throws com.google.protobuf.ServiceException;
      
      public control_data.read_control_data_response controlDataRead(
              com.google.protobuf.RpcController controller,
              control_data.read_control_req request)
          throws com.google.protobuf.ServiceException;
      
      public alarm_data.read_alarm_data_response alarmDataRead(
              com.google.protobuf.RpcController controller,
              alarm_data.read_alarm_req request)
          throws com.google.protobuf.ServiceException;
      
      public offline_info.update_offline_status_result offlineRead(
              com.google.protobuf.RpcController controller,
              offline_info.update_offline_status_request request)
          throws com.google.protobuf.ServiceException;
      
      public offline_info.device_info_response deviceRead(
              com.google.protobuf.RpcController controller,
              offline_info.device_info_request request)
          throws com.google.protobuf.ServiceException;
      
      public com.ideal.logic.server_lastestdata.server_lastestdata_response regServerLastestdata(
              com.google.protobuf.RpcController controller,
              com.ideal.logic.server_lastestdata.reg_server_lastestdata request)
          throws com.google.protobuf.ServiceException;
      
      public com.ideal.logic.server_online.server_online_response regServerOnline(
              com.google.protobuf.RpcController controller,
              com.ideal.logic.server_online.reg_server_online request)
          throws com.google.protobuf.ServiceException;
      
      public com.ideal.logic.server_lastestdata.unreg_lastestdata_response unregServerLastestdata(
              com.google.protobuf.RpcController controller,
              com.ideal.logic.server_lastestdata.unreg_server_lastestdata request)
          throws com.google.protobuf.ServiceException;
      
      public com.ideal.logic.server_online.unreg_online_response unregServerOnline(
              com.google.protobuf.RpcController controller,
              com.ideal.logic.server_online.unreg_server_online request)
          throws com.google.protobuf.ServiceException;
    }
    
    private static final class BlockingStub implements BlockingInterface {
      private BlockingStub(com.google.protobuf.BlockingRpcChannel channel) {
        this.channel = channel;
      }
      
      private final com.google.protobuf.BlockingRpcChannel channel;
      
      public modbus_data.modbus_response modbusControl(
          com.google.protobuf.RpcController controller,
          modbus_data.modbus_req request)
          throws com.google.protobuf.ServiceException {
        return (modbus_data.modbus_response) channel.callBlockingMethod(
          getDescriptor().getMethods().get(0),
          controller,
          request,
          modbus_data.modbus_response.getDefaultInstance());
      }
      
      
      public modbus_data.read_data_response modbusRead(
          com.google.protobuf.RpcController controller,
          modbus_data.read_data_req request)
          throws com.google.protobuf.ServiceException {
        return (modbus_data.read_data_response) channel.callBlockingMethod(
          getDescriptor().getMethods().get(1),
          controller,
          request,
          modbus_data.read_data_response.getDefaultInstance());
      }
      
      
      public login_data.login_response userLogin(
          com.google.protobuf.RpcController controller,
          login_data.login_req request)
          throws com.google.protobuf.ServiceException {
        return (login_data.login_response) channel.callBlockingMethod(
          getDescriptor().getMethods().get(2),
          controller,
          request,
          login_data.login_response.getDefaultInstance());
      }
      
      
      public hmi_data.hmi_control_response hmiControl(
          com.google.protobuf.RpcController controller,
          hmi_data.hmi_control_req request)
          throws com.google.protobuf.ServiceException {
        return (hmi_data.hmi_control_response) channel.callBlockingMethod(
          getDescriptor().getMethods().get(3),
          controller,
          request,
          hmi_data.hmi_control_response.getDefaultInstance());
      }
      
      
      public control_data.control_response commandControl(
          com.google.protobuf.RpcController controller,
          control_data.control_req request)
          throws com.google.protobuf.ServiceException {
        return (control_data.control_response) channel.callBlockingMethod(
          getDescriptor().getMethods().get(4),
          controller,
          request,
          control_data.control_response.getDefaultInstance());
      }
      
      
      public online_info.update_online_status_result updateOnlineStatus(
          com.google.protobuf.RpcController controller,
          online_info.update_online_status_request request)
          throws com.google.protobuf.ServiceException {
        return (online_info.update_online_status_result) channel.callBlockingMethod(
          getDescriptor().getMethods().get(5),
          controller,
          request,
          online_info.update_online_status_result.getDefaultInstance());
      }
      
      
      public lastest_data.update_lastest_data_result updateLastestData(
          com.google.protobuf.RpcController controller,
          lastest_data.update_lastest_data_request request)
          throws com.google.protobuf.ServiceException {
        return (lastest_data.update_lastest_data_result) channel.callBlockingMethod(
          getDescriptor().getMethods().get(6),
          controller,
          request,
          lastest_data.update_lastest_data_result.getDefaultInstance());
      }
      
      
      public lastest_data.reg_lastest_data_response regRefreshLastestData(
          com.google.protobuf.RpcController controller,
          lastest_data.reg_lastest_data request)
          throws com.google.protobuf.ServiceException {
        return (lastest_data.reg_lastest_data_response) channel.callBlockingMethod(
          getDescriptor().getMethods().get(7),
          controller,
          request,
          lastest_data.reg_lastest_data_response.getDefaultInstance());
      }
      
      
      public lastest_data.unreg_lastest_data_response unregRefreshLastestData(
          com.google.protobuf.RpcController controller,
          lastest_data.unreg_lastest_data request)
          throws com.google.protobuf.ServiceException {
        return (lastest_data.unreg_lastest_data_response) channel.callBlockingMethod(
          getDescriptor().getMethods().get(8),
          controller,
          request,
          lastest_data.unreg_lastest_data_response.getDefaultInstance());
      }
      
      
      public file_data.update_file_result updateFile(
          com.google.protobuf.RpcController controller,
          file_data.update_file_request request)
          throws com.google.protobuf.ServiceException {
        return (file_data.update_file_result) channel.callBlockingMethod(
          getDescriptor().getMethods().get(9),
          controller,
          request,
          file_data.update_file_result.getDefaultInstance());
      }
      
      
      public login_data.change_pwd_result changePassword(
          com.google.protobuf.RpcController controller,
          login_data.change_pwd_request request)
          throws com.google.protobuf.ServiceException {
        return (login_data.change_pwd_result) channel.callBlockingMethod(
          getDescriptor().getMethods().get(10),
          controller,
          request,
          login_data.change_pwd_result.getDefaultInstance());
      }
      
      
      public control_data.read_control_data_response controlDataRead(
          com.google.protobuf.RpcController controller,
          control_data.read_control_req request)
          throws com.google.protobuf.ServiceException {
        return (control_data.read_control_data_response) channel.callBlockingMethod(
          getDescriptor().getMethods().get(11),
          controller,
          request,
          control_data.read_control_data_response.getDefaultInstance());
      }
      
      
      public alarm_data.read_alarm_data_response alarmDataRead(
          com.google.protobuf.RpcController controller,
          alarm_data.read_alarm_req request)
          throws com.google.protobuf.ServiceException {
        return (alarm_data.read_alarm_data_response) channel.callBlockingMethod(
          getDescriptor().getMethods().get(12),
          controller,
          request,
          alarm_data.read_alarm_data_response.getDefaultInstance());
      }
      
      
      public offline_info.update_offline_status_result offlineRead(
          com.google.protobuf.RpcController controller,
          offline_info.update_offline_status_request request)
          throws com.google.protobuf.ServiceException {
        return (offline_info.update_offline_status_result) channel.callBlockingMethod(
          getDescriptor().getMethods().get(13),
          controller,
          request,
          offline_info.update_offline_status_result.getDefaultInstance());
      }
      
      
      public offline_info.device_info_response deviceRead(
          com.google.protobuf.RpcController controller,
          offline_info.device_info_request request)
          throws com.google.protobuf.ServiceException {
        return (offline_info.device_info_response) channel.callBlockingMethod(
          getDescriptor().getMethods().get(14),
          controller,
          request,
          offline_info.device_info_response.getDefaultInstance());
      }
      
      
      public com.ideal.logic.server_lastestdata.server_lastestdata_response regServerLastestdata(
          com.google.protobuf.RpcController controller,
          com.ideal.logic.server_lastestdata.reg_server_lastestdata request)
          throws com.google.protobuf.ServiceException {
        return (com.ideal.logic.server_lastestdata.server_lastestdata_response) channel.callBlockingMethod(
          getDescriptor().getMethods().get(15),
          controller,
          request,
          com.ideal.logic.server_lastestdata.server_lastestdata_response.getDefaultInstance());
      }
      
      
      public com.ideal.logic.server_online.server_online_response regServerOnline(
          com.google.protobuf.RpcController controller,
          com.ideal.logic.server_online.reg_server_online request)
          throws com.google.protobuf.ServiceException {
        return (com.ideal.logic.server_online.server_online_response) channel.callBlockingMethod(
          getDescriptor().getMethods().get(16),
          controller,
          request,
          com.ideal.logic.server_online.server_online_response.getDefaultInstance());
      }
      
      
      public com.ideal.logic.server_lastestdata.unreg_lastestdata_response unregServerLastestdata(
          com.google.protobuf.RpcController controller,
          com.ideal.logic.server_lastestdata.unreg_server_lastestdata request)
          throws com.google.protobuf.ServiceException {
        return (com.ideal.logic.server_lastestdata.unreg_lastestdata_response) channel.callBlockingMethod(
          getDescriptor().getMethods().get(17),
          controller,
          request,
          com.ideal.logic.server_lastestdata.unreg_lastestdata_response.getDefaultInstance());
      }
      
      
      public com.ideal.logic.server_online.unreg_online_response unregServerOnline(
          com.google.protobuf.RpcController controller,
          com.ideal.logic.server_online.unreg_server_online request)
          throws com.google.protobuf.ServiceException {
        return (com.ideal.logic.server_online.unreg_online_response) channel.callBlockingMethod(
          getDescriptor().getMethods().get(18),
          controller,
          request,
          com.ideal.logic.server_online.unreg_online_response.getDefaultInstance());
      }
      
    }
  }
  
  
  public static com.google.protobuf.Descriptors.FileDescriptor
      getDescriptor() {
    return descriptor;
  }
  private static com.google.protobuf.Descriptors.FileDescriptor
      descriptor;
  static {
    String[] descriptorData = {
      "\n\021logic/logic.proto\022\017com.ideal.logic\032\027lo" +
      "gic/modbus_data.proto\032\026logic/login_data." +
      "proto\032\024logic/hmi_data.proto\032\030logic/contr" +
      "ol_data.proto\032\027logic/online_info.proto\032\030" +
      "logic/lastest_data.proto\032\027logic/update_f" +
      "ile.proto\032\026logic/alarm_data.proto\032\030logic" +
      "/offline_info.proto\032\031logic/server_online" +
      ".proto\032\036logic/server_lastestdata.proto2\304" +
      "\016\n\014logic_server\022O\n\016modbus_control\022\033.com." +
      "ideal.logic.modbus_req\032 .com.ideal.logic",
      ".modbus_response\022R\n\013modbus_read\022\036.com.id" +
      "eal.logic.read_data_req\032#.com.ideal.logi" +
      "c.read_data_response\022I\n\nuser_login\022\032.com" +
      ".ideal.logic.login_req\032\037.com.ideal.logic" +
      ".login_response\022V\n\013hmi_control\022 .com.ide" +
      "al.logic.hmi_control_req\032%.com.ideal.log" +
      "ic.hmi_control_response\022R\n\017command_contr" +
      "ol\022\034.com.ideal.logic.control_req\032!.com.i" +
      "deal.logic.control_response\022q\n\022updateOnl" +
      "ineStatus\022-.com.ideal.logic.update_onlin",
      "e_status_request\032,.com.ideal.logic.updat" +
      "e_online_status_result\022n\n\021updateLastestD" +
      "ata\022,.com.ideal.logic.update_lastest_dat" +
      "a_request\032+.com.ideal.logic.update_laste" +
      "st_data_result\022f\n\025regRefreshLastestData\022" +
      "!.com.ideal.logic.reg_lastest_data\032*.com" +
      ".ideal.logic.reg_lastest_data_response\022l" +
      "\n\027unregRefreshLastestData\022#.com.ideal.lo" +
      "gic.unreg_lastest_data\032,.com.ideal.logic" +
      ".unreg_lastest_data_response\022W\n\nupdateFi",
      "le\022$.com.ideal.logic.update_file_request" +
      "\032#.com.ideal.logic.update_file_result\022Y\n" +
      "\016changePassword\022#.com.ideal.logic.change" +
      "_pwd_request\032\".com.ideal.logic.change_pw" +
      "d_result\022a\n\017controlDataRead\022!.com.ideal." +
      "logic.read_control_req\032+.com.ideal.logic" +
      ".read_control_data_response\022[\n\ralarmData" +
      "Read\022\037.com.ideal.logic.read_alarm_req\032)." +
      "com.ideal.logic.read_alarm_data_response" +
      "\022l\n\013offlineRead\022..com.ideal.logic.update",
      "_offline_status_request\032-.com.ideal.logi" +
      "c.update_offline_status_result\022Y\n\ndevice" +
      "Read\022$.com.ideal.logic.device_info_reque" +
      "st\032%.com.ideal.logic.device_info_respons" +
      "e\022m\n\024regServerLastestdata\022\'.com.ideal.lo" +
      "gic.reg_server_lastestdata\032,.com.ideal.l" +
      "ogic.server_lastestdata_response\022^\n\017regS" +
      "erverOnline\022\".com.ideal.logic.reg_server" +
      "_online\032\'.com.ideal.logic.server_online_" +
      "response\022p\n\026unregServerLastestdata\022).com",
      ".ideal.logic.unreg_server_lastestdata\032+." +
      "com.ideal.logic.unreg_lastestdata_respon" +
      "se\022a\n\021unregServerOnline\022$.com.ideal.logi" +
      "c.unreg_server_online\032&.com.ideal.logic." +
      "unreg_online_responseB\036\n\017com.ideal.logic" +
      "B\005logic\200\001\001\210\001\001"
    };
    com.google.protobuf.Descriptors.FileDescriptor.InternalDescriptorAssigner assigner =
      new com.google.protobuf.Descriptors.FileDescriptor.InternalDescriptorAssigner() {
        public com.google.protobuf.ExtensionRegistry assignDescriptors(
            com.google.protobuf.Descriptors.FileDescriptor root) {
          descriptor = root;
          return null;
        }
      };
    com.google.protobuf.Descriptors.FileDescriptor
      .internalBuildGeneratedFileFrom(descriptorData,
        new com.google.protobuf.Descriptors.FileDescriptor[] {
          modbus_data.getDescriptor(),
          login_data.getDescriptor(),
          hmi_data.getDescriptor(),
          control_data.getDescriptor(),
          online_info.getDescriptor(),
          lastest_data.getDescriptor(),
          file_data.getDescriptor(),
          alarm_data.getDescriptor(),
          offline_info.getDescriptor(),
          com.ideal.logic.server_online.getDescriptor(),
          com.ideal.logic.server_lastestdata.getDescriptor(),
        }, assigner);
  }
  
  // @@protoc_insertion_point(outer_class_scope)
}
